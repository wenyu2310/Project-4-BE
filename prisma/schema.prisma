generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique @db.VarChar(50)
  gender         Gender
  dateOfBirth    DateTime      @db.Date
  address        String        @db.VarChar(225)
  contactNumber  String        @db.VarChar(20)
  hashedPassword String        @db.VarChar(100)
  name           String        @db.VarChar(50)
  comments       Comment[]
  feedbacks      Feedback[]
  likes          Like[]
  mailinglist    MailingList[]
  proposals      Proposal[]

  @@map("users")
}

model Admin {
  id             Int    @id @default(autoincrement())
  email          String @unique @db.VarChar(50)
  name           String        @db.VarChar(50)
  hashedPassword String @db.VarChar(100)
}

model Park {
  id               Int           @id @default(autoincrement())
  name             String        @unique @db.VarChar(50)
  description      String
  targetCompletion DateTime      @db.Date
  status           Int
  plan             String
  perspective      String
  stage            String        @db.VarChar(100)
  feedbacks        Feedback[]
  mailinglist      MailingList[]
  proposals        Proposal[]

  @@map("parks")
}

model Proposal {
  id        Int       @id @default(autoincrement())
  subject   String    @db.VarChar(250)
  text      String
  createdAt DateTime?
  userId    Int
  parkId    Int
  comments  Comment[]
  likes     Like[]
  park      Park      @relation(fields: [parkId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("proposals")
}

model Comment {
  id         Int       @id @default(autoincrement())
  text       String
  createdAt  DateTime?
  userId     Int
  proposalId Int
  proposal   Proposal  @relation(fields: [proposalId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Like {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime?
  userId     Int
  proposalId Int
  proposal   Proposal  @relation(fields: [proposalId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Feedback {
  id        Int       @id @default(autoincrement())
  subject   String    @db.VarChar(250)
  text      String
  createdAt DateTime?
  userId    Int
  parkId    Int
  park      Park      @relation(fields: [parkId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("Feedbacks")
}

model MailingList {
  id        Int       @id @default(autoincrement())
  createdAt DateTime?
  userId    Int
  parkId    Int
  park      Park      @relation(fields: [parkId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("mailingList")
}

enum Gender {
  Female
  Male
}
